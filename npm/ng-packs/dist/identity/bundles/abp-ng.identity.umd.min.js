!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@angular/core"),require("@ngxs/store"),require("rxjs"),require("@angular/forms"),require("rxjs/operators"),require("@abp/ng.theme.shared"),require("@angular/router"),require("@ngx-validate/core"),require("snq"),require("@ng-bootstrap/ng-bootstrap"),require("@abp/ng.permission-management"),require("primeng/table"),require("ngx-perfect-scrollbar")):"function"==typeof define&&define.amd?define("@abp/ng.identity",["exports","@abp/ng.core","@angular/core","@ngxs/store","rxjs","@angular/forms","rxjs/operators","@abp/ng.theme.shared","@angular/router","@ngx-validate/core","snq","@ng-bootstrap/ng-bootstrap","@abp/ng.permission-management","primeng/table","ngx-perfect-scrollbar"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.identity={}),e.ng_core,e.ng.core,e.store,e.rxjs,e.ng.forms,e.rxjs.operators,e.ng_theme_shared,e.ng.router,e.core$1,e.snq,e.ngBootstrap,e.ng_permissionManagement,e.table,e.ngxPerfectScrollbar)}(this,function(e,t,n,o,r,i,a,s,l,p,d,c,u,b,y){"use strict";d=d&&d.hasOwnProperty("default")?d.default:d;var m=function(){return(m=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function f(e,t,n,o){var r,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(i<3?r(a):i>3?r(t,n,a):r(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function h(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,r,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(o=i.next()).done;)a.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return a}var v,I=function(){function e(){}return e.type="[Identity] Get Roles",e}(),w=function(){function e(e){this.payload=e}return e.type="[Identity] Get Role By Id",e}(),A=function(){function e(e){this.payload=e}return e.type="[Identity] Delete Role",e}(),R=function(){function e(e){this.payload=e}return e.type="[Identity] Add Role",e}(),U=function(){function e(e){this.payload=e}return e.type="[Identity] Update Role",e}(),S=function(){function e(e){this.payload=e}return e.type="[Identity] Get Users",e}(),L=function(){function e(e){this.payload=e}return e.type="[Identity] Get User By Id",e}(),N=function(){function e(e){this.payload=e}return e.type="[Identity] Delete User",e}(),x=function(){function e(e){this.payload=e}return e.type="[Identity] Add User",e}(),C=function(){function e(e){this.payload=e}return e.type="[Identity] Update User",e}(),k=function(){function e(e){this.payload=e}return e.type="[Identity] Get User Roles",e}(),P=function(){function e(e){this.rest=e}return e.prototype.getRoles=function(){return this.rest.request({method:"GET",url:"/api/identity/roles"})},e.prototype.getRoleById=function(e){var t={method:"GET",url:"/api/identity/roles/"+e};return this.rest.request(t)},e.prototype.deleteRole=function(e){var t={method:"DELETE",url:"/api/identity/roles/"+e};return this.rest.request(t)},e.prototype.addRole=function(e){var t={method:"POST",url:"/api/identity/roles",body:e};return this.rest.request(t)},e.prototype.updateRole=function(e){var t="/api/identity/roles/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n)},e.prototype.getUsers=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/users",params:e};return this.rest.request(t)},e.prototype.getUserById=function(e){var t={method:"GET",url:"/api/identity/users/"+e};return this.rest.request(t)},e.prototype.getUserRoles=function(e){var t={method:"GET",url:"/api/identity/users/"+e+"/roles"};return this.rest.request(t)},e.prototype.deleteUser=function(e){var t={method:"DELETE",url:"/api/identity/users/"+e};return this.rest.request(t)},e.prototype.addUser=function(e){var t={method:"POST",url:"/api/identity/users",body:e};return this.rest.request(t)},e.prototype.updateUser=function(e){var t="/identity/users/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n)},e.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:t.RestService}]},e.ngInjectableDef=n.ɵɵdefineInjectable({factory:function(){return new e(n.ɵɵinject(t.RestService))},token:e,providedIn:"root"}),e}(),M=function(){function e(e){this.identityService=e}return e.getRoles=function(e){return e.roles.items},e.getRolesTotalCount=function(e){return e.roles.totalCount},e.getUsers=function(e){return e.users.items},e.getUsersTotalCount=function(e){return e.users.totalCount},e.prototype.getRoles=function(e){var t=e.patchState;return this.identityService.getRoles().pipe(a.tap(function(e){return t({roles:e})}))},e.prototype.getRole=function(e,t){var n=e.patchState,o=t.payload;return this.identityService.getRoleById(o).pipe(a.tap(function(e){return n({selectedRole:e})}))},e.prototype.deleteRole=function(e,t){var n=e.dispatch,o=t.payload;return this.identityService.deleteRole(o).pipe(a.switchMap(function(){return n(new I)}))},e.prototype.addRole=function(e,t){var n=e.dispatch,o=t.payload;return this.identityService.addRole(o).pipe(a.switchMap(function(){return n(new I)}))},e.prototype.updateRole=function(e,t){var n=this,o=e.getState,r=e.dispatch,i=t.payload;return r(new w(i.id)).pipe(a.switchMap(function(){return n.identityService.updateRole(m({},o().selectedRole,i))}),a.switchMap(function(){return r(new I)}))},e.prototype.getUsers=function(e,t){var n=e.patchState,o=t.payload;return this.identityService.getUsers(o).pipe(a.tap(function(e){return n({users:e})}))},e.prototype.getUser=function(e,t){var n=e.patchState,o=t.payload;return this.identityService.getUserById(o).pipe(a.tap(function(e){return n({selectedUser:e})}))},e.prototype.deleteUser=function(e,t){var n=e.dispatch,o=t.payload;return this.identityService.deleteUser(o).pipe(a.switchMap(function(){return n(new S)}))},e.prototype.addUser=function(e,t){var n=e.dispatch,o=t.payload;return this.identityService.addUser(o).pipe(a.switchMap(function(){return n(new S)}))},e.prototype.updateUser=function(e,t){var n=this,o=e.getState,r=e.dispatch,i=t.payload;return r(new L(i.id)).pipe(a.switchMap(function(){return n.identityService.updateUser(m({},o().selectedUser,i))}),a.switchMap(function(){return r(new S)}))},e.prototype.getUserRoles=function(e,t){var n=e.patchState,o=t.payload;return this.identityService.getUserRoles(o).pipe(a.pluck("items"),a.tap(function(e){return n({selectedUserRoles:e})}))},f([o.Action(I),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",void 0)],e.prototype,"getRoles",null),f([o.Action(w),h("design:type",Function),h("design:paramtypes",[Object,w]),h("design:returntype",void 0)],e.prototype,"getRole",null),f([o.Action(A),h("design:type",Function),h("design:paramtypes",[Object,w]),h("design:returntype",void 0)],e.prototype,"deleteRole",null),f([o.Action(R),h("design:type",Function),h("design:paramtypes",[Object,R]),h("design:returntype",void 0)],e.prototype,"addRole",null),f([o.Action(U),h("design:type",Function),h("design:paramtypes",[Object,U]),h("design:returntype",void 0)],e.prototype,"updateRole",null),f([o.Action(S),h("design:type",Function),h("design:paramtypes",[Object,S]),h("design:returntype",void 0)],e.prototype,"getUsers",null),f([o.Action(L),h("design:type",Function),h("design:paramtypes",[Object,L]),h("design:returntype",void 0)],e.prototype,"getUser",null),f([o.Action(N),h("design:type",Function),h("design:paramtypes",[Object,L]),h("design:returntype",void 0)],e.prototype,"deleteUser",null),f([o.Action(x),h("design:type",Function),h("design:paramtypes",[Object,x]),h("design:returntype",void 0)],e.prototype,"addUser",null),f([o.Action(C),h("design:type",Function),h("design:paramtypes",[Object,C]),h("design:returntype",void 0)],e.prototype,"updateUser",null),f([o.Action(k),h("design:type",Function),h("design:paramtypes",[Object,k]),h("design:returntype",void 0)],e.prototype,"getUserRoles",null),f([o.Selector(),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",Array)],e,"getRoles",null),f([o.Selector(),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",Number)],e,"getRolesTotalCount",null),f([o.Selector(),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",Array)],e,"getUsers",null),f([o.Selector(),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",Number)],e,"getUsersTotalCount",null),e=f([o.State({name:"IdentityState",defaults:{roles:{},selectedRole:{},users:{},selectedUser:{}}}),h("design:paramtypes",[P])],e)}(),z=function(){function e(e,t,n){this.confirmationService=e,this.fb=t,this.store=n,this.visiblePermissions=!1}return e.prototype.createForm=function(){this.form=this.fb.group({name:[this.selected.name||"",[i.Validators.required,i.Validators.maxLength(256)]],isDefault:[this.selected.isDefault||!1],isPublic:[this.selected.isPublic||!1]})},e.prototype.openModal=function(){this.createForm(),this.isModalVisible=!0},e.prototype.onAdd=function(){this.selected={},this.openModal()},e.prototype.onEdit=function(e){var t=this;this.store.dispatch(new w(e)).pipe(a.pluck("IdentityState","selectedRole")).subscribe(function(e){t.selected=e,t.openModal()})},e.prototype.save=function(){var e=this;this.form.valid&&this.store.dispatch(this.selected.id?new U(m({},this.form.value,{id:this.selected.id})):new R(this.form.value)).subscribe(function(){e.isModalVisible=!1})},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe(function(t){"confirm"===t&&n.store.dispatch(new A(e))})},e.decorators=[{type:n.Component,args:[{selector:"abp-roles",template:'<div id="identity-roles-wrapper" class="card">\n  <div class="card-header">\n    <div class="row">\n      <div class="col col-md-6">\n        <h5 class="card-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h5>\n      </div>\n      <div class="text-right col col-md-6">\n        <button id="create-role" class="btn btn-primary" type="button" (click)="onAdd()">\n          <i class="fa fa-plus mr-1"></i> <span>{{ \'AbpIdentity::NewRole\' | abpLocalization }}</span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="card-body">\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <label\n        ><input\n          type="search"\n          class="form-control form-control-sm"\n          placeholder="Search"\n          (input)="dt.filterGlobal($event.target.value, \'contains\')"\n      /></label>\n    </div>\n    <p-table #dt [value]="roles$ | async" [globalFilterFields]="[\'name\']" [paginator]="true" [rows]="10">\n      <ng-template pTemplate="header">\n        <tr>\n          <th>{{ \'AbpIdentity::Actions\' | abpLocalization }}</th>\n          <th>{{ \'AbpIdentity::RoleName\' | abpLocalization }}</th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate="body" let-data>\n        <tr>\n          <td>\n            <div ngbDropdown class="d-inline-block">\n              <button\n                class="btn btn-primary btn-sm dropdown-toggle"\n                data-toggle="dropdown"\n                aria-haspopup="true"\n                ngbDropdownToggle\n              >\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\n              </button>\n              <div ngbDropdownMenu>\n                <button ngbDropdownItem (click)="onEdit(data.id)">{{ \'AbpIdentity::Edit\' | abpLocalization }}</button>\n                <button ngbDropdownItem (click)="providerKey = data.name; visiblePermissions = true">\n                  {{ \'AbpIdentity::Permissions\' | abpLocalization }}\n                </button>\n                <button ngbDropdownItem (click)="delete(data.id, data.name)">\n                  {{ \'AbpIdentity::Delete\' | abpLocalization }}\n                </button>\n              </div>\n            </div>\n          </td>\n          <td>{{ data.name }}</td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </div>\n</div>\n\n<abp-modal size="md" [(visible)]="isModalVisible" *ngIf="isModalVisible" [centered]="true">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <form [formGroup]="form">\n      <div class="form-group">\n        <label for="role-name">{{ \'AbpIdentity::RoleName\' | abpLocalization }}</label\n        ><span> * </span>\n        <input type="text" id="role-name" class="form-control" formControlName="name" />\n      </div>\n\n      <div class="custom-checkbox custom-control mb-2">\n        <input type="checkbox" id="role-is-default" class="custom-control-input" formControlName="isDefault" />\n        <label class="custom-control-label" for="role-is-default">{{\n          \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\n        }}</label>\n      </div>\n\n      <div class="custom-checkbox custom-control mb-2">\n        <input type="checkbox" id="role-is-public" class="custom-control-input" formControlName="isPublic" />\n        <label class="custom-control-label" for="role-is-public">{{\n          \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\n        }}</label>\n      </div>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type="button" class="btn btn-secondary" #abpClose>\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <button type="button" class="btn btn-primary" (click)="save()">\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpIdentity::Save\' | abpLocalization }}</span>\n    </button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  [(visible)]="visiblePermissions"\n  providerName="Role"\n  [providerKey]="providerKey"\n></abp-permission-management>\n'}]}],e.ctorParameters=function(){return[{type:s.ConfirmationService},{type:i.FormBuilder},{type:o.Store}]},e.propDecorators={modalContent:[{type:n.ViewChild,args:["modalContent",{static:!1}]}]},f([o.Select(M.getRoles),h("design:type",r.Observable)],e.prototype,"roles$",void 0),e}(),j=function(){function e(e){this.store=e}return e.prototype.resolve=function(){var e=this.store.selectSnapshot(M.getRoles);return e&&e.length?null:this.store.dispatch(new I)},e.decorators=[{type:n.Injectable}],e.ctorParameters=function(){return[{type:o.Store}]},e}(),D=function(){function e(e,t,n){this.confirmationService=e,this.fb=t,this.store=n,this.visiblePermissions=!1,this.pageQuery={sorting:"userName"},this.loading=!1,this.search$=new r.Subject,this.trackByFn=function(e,t){return Object.keys(t)[0]||e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return d(function(){return e.form.get("roleNames").controls},[])},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;this.search$.pipe(a.debounceTime(300)).subscribe(function(t){e.pageQuery.filter=t,e.get()})},e.prototype.buildForm=function(){var e=this;this.roles=this.store.selectSnapshot(M.getRoles),this.form=this.fb.group({password:["",[i.Validators.required,i.Validators.maxLength(32),i.Validators.minLength(6),p.validatePassword(["small","capital","number","special"])]],userName:[this.selected.userName||"",[i.Validators.required,i.Validators.maxLength(256)]],email:[this.selected.email||"",[i.Validators.required,i.Validators.email,i.Validators.maxLength(256)]],name:[this.selected.name||"",[i.Validators.maxLength(64)]],surname:[this.selected.surname||"",[i.Validators.maxLength(64)]],phoneNumber:[this.selected.phoneNumber||"",[i.Validators.maxLength(16)]],lockoutEnabled:[this.selected.twoFactorEnabled||!this.selected.id],twoFactorEnabled:[this.selected.twoFactorEnabled||!this.selected.id],roleNames:this.fb.array(this.roles.map(function(t){var n;return e.fb.group(((n={})[t.name]=[!!d(function(){return e.selectedUserRoles.find(function(e){return e.id===t.id})})],n))}))})},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.onAdd=function(){this.selected={},this.selectedUserRoles=[],this.openModal()},e.prototype.onEdit=function(e){var t=this;r.combineLatest([this.store.dispatch(new L(e)),this.store.dispatch(new k(e))]).pipe(a.filter(function(e){var t=g(e,2),n=t[0],o=t[1];return n&&o}),a.map(function(e){var t=g(e,2),n=t[0];t[1];return n}),a.pluck("IdentityState"),a.take(1)).subscribe(function(e){t.selected=e.selectedUser,t.selectedUserRoles=e.selectedUserRoles,t.openModal()})},e.prototype.save=function(){var e=this;if(this.form.valid){var t=this.form.value.roleNames,n=d(function(){return t.filter(function(e){return!!e[Object.keys(e)[0]]}).map(function(e){return Object.keys(e)[0]})},[]);this.store.dispatch(this.selected.id?new C(m({},this.form.value,{id:this.selected.id,roleNames:n})):new x(m({},this.form.value,{roleNames:n}))).subscribe(function(){e.isModalVisible=!1})}},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe(function(t){"confirm"===t&&n.store.dispatch(new N(e))})},e.prototype.onPageChange=function(e){this.pageQuery.skipCount=e.first,this.pageQuery.maxResultCount=e.rows,this.get()},e.prototype.get=function(){var e=this;this.loading=!0,this.store.dispatch(new S(this.pageQuery)).subscribe(function(){return e.loading=!1})},e.decorators=[{type:n.Component,args:[{selector:"abp-users",template:'<div id="identity-roles-wrapper" class="card">\n  <div class="card-header">\n    <div class="row">\n      <div class="col col-md-6">\n        <h5 class="card-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h5>\n      </div>\n      <div class="text-right col col-md-6">\n        <button\n          [abpPermission]="\'AbpIdentity.Users.Create\'"\n          id="create-role"\n          class="btn btn-primary"\n          type="button"\n          (click)="onAdd()"\n        >\n          <i class="fa fa-plus mr-1"></i> <span>{{ \'AbpIdentity::NewUser\' | abpLocalization }}</span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="card-body">\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <label\n        ><input\n          type="search"\n          class="form-control form-control-sm"\n          placeholder="Search"\n          (input)="search$.next($event.target.value)"\n      /></label>\n    </div>\n    <p-table\n      [value]="data$ | async"\n      [lazy]="true"\n      [lazyLoadOnInit]="false"\n      [paginator]="true"\n      [rows]="10"\n      [totalRecords]="totalCount$ | async"\n      [loading]="loading"\n      (onLazyLoad)="onPageChange($event)"\n    >\n      <ng-template pTemplate="header">\n        <tr>\n          <th>{{ \'AbpIdentity::Actions\' | abpLocalization }}</th>\n          <th>{{ \'AbpIdentity::UserName\' | abpLocalization }}</th>\n          <th>{{ \'AbpIdentity::EmailAddress\' | abpLocalization }}</th>\n          <th>{{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}</th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate="body" let-data>\n        <tr>\n          <td>\n            <div ngbDropdown class="d-inline-block">\n              <button\n                class="btn btn-primary btn-sm dropdown-toggle"\n                data-toggle="dropdown"\n                aria-haspopup="true"\n                ngbDropdownToggle\n              >\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\n              </button>\n              <div ngbDropdownMenu>\n                <button ngbDropdownItem (click)="onEdit(data.id)">{{ \'AbpIdentity::Edit\' | abpLocalization }}</button>\n                <button ngbDropdownItem (click)="providerKey = data.id; visiblePermissions = true">\n                  {{ \'AbpIdentity::Permissions\' | abpLocalization }}\n                </button>\n                <button ngbDropdownItem (click)="delete(data.id, data.userName)">\n                  {{ \'AbpIdentity::Delete\' | abpLocalization }}\n                </button>\n              </div>\n            </div>\n          </td>\n          <td>{{ data.userName }}</td>\n          <td>{{ data.email }}</td>\n          <td>{{ data.phoneNumber }}</td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </div>\n</div>\n\n<abp-modal [(visible)]="isModalVisible" *ngIf="isModalVisible">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <perfect-scrollbar class="ps-show-always" style="max-height: 65vh;">\n      <form [formGroup]="form">\n        <ngb-tabset>\n          <ngb-tab [title]="\'AbpIdentity::UserInformations\' | abpLocalization">\n            <ng-template ngbTabContent>\n              <div class="mt-2">\n                <div class="form-group">\n                  <label for="user-name">{{ \'AbpIdentity::UserName\' | abpLocalization }}</label\n                  ><span> * </span>\n                  <input type="text" id="user-name" class="form-control" formControlName="userName" />\n                </div>\n\n                <div class="form-group">\n                  <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label>\n                  <input type="text" id="name" class="form-control" formControlName="name" />\n                </div>\n\n                <div class="form-group">\n                  <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label>\n                  <input type="text" id="surname" class="form-control" formControlName="surname" />\n                </div>\n\n                <div class="form-group">\n                  <label for="password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label\n                  ><span> * </span>\n                  <input\n                    type="password"\n                    id="password"\n                    autocomplete="new-password"\n                    class="form-control"\n                    formControlName="password"\n                  />\n                </div>\n\n                <div class="form-group">\n                  <label for="email">{{ \'AbpIdentity::EmailAddress\' | abpLocalization }}</label\n                  ><span> * </span>\n                  <input type="text" id="email" class="form-control" formControlName="email" />\n                </div>\n\n                <div class="form-group">\n                  <label for="phone-number">{{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}</label>\n                  <input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\n                </div>\n\n                <div class="custom-checkbox custom-control mb-2">\n                  <input\n                    type="checkbox"\n                    id="lockout-checkbox"\n                    class="custom-control-input"\n                    formControlName="lockoutEnabled"\n                  />\n                  <label class="custom-control-label" for="lockout-checkbox">{{\n                    \'AbpIdentity::DisplayName:LockoutEnabled\' | abpLocalization\n                  }}</label>\n                </div>\n\n                <div class="custom-checkbox custom-control mb-2">\n                  <input\n                    type="checkbox"\n                    id="two-factor-checkbox"\n                    class="custom-control-input"\n                    formControlName="twoFactorEnabled"\n                  />\n                  <label class="custom-control-label" for="two-factor-checkbox">{{\n                    \'AbpIdentity::DisplayName:TwoFactorEnabled\' | abpLocalization\n                  }}</label>\n                </div>\n              </div>\n            </ng-template>\n          </ngb-tab>\n          <ngb-tab [title]="\'AbpIdentity::Roles\' | abpLocalization">\n            <ng-template ngbTabContent>\n              <div class="mt-2">\n                <div\n                  *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\n                  class="custom-checkbox custom-control mb-2"\n                >\n                  <input\n                    type="checkbox"\n                    name="Roles[0].IsAssigned"\n                    value="true"\n                    class="custom-control-input"\n                    [attr.id]="\'roles-\' + i"\n                    [formControl]="roleGroup.controls[roles[i].name]"\n                  />\n                  <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{ roles[i].name }}</label>\n                </div>\n              </div>\n            </ng-template>\n          </ngb-tab>\n        </ngb-tabset>\n      </form>\n    </perfect-scrollbar>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type="button" class="btn btn-secondary" #abpClose>\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <button type="button" class="btn btn-primary" (click)="save()">\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpIdentity::Save\' | abpLocalization }}</span>\n    </button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  [(visible)]="visiblePermissions"\n  providerName="User"\n  [providerKey]="providerKey"\n></abp-permission-management>\n'}]}],e.ctorParameters=function(){return[{type:s.ConfirmationService},{type:i.FormBuilder},{type:o.Store}]},e.propDecorators={modalContent:[{type:n.ViewChild,args:["modalContent",{static:!1}]}]},f([o.Select(M.getUsers),h("design:type",r.Observable)],e.prototype,"data$",void 0),f([o.Select(M.getUsersTotalCount),h("design:type",r.Observable)],e.prototype,"totalCount$",void 0),e}(),q=function(){function e(e){this.store=e}return e.prototype.resolve=function(){var e=this.store.selectSnapshot(M.getUsers);return e&&e.length?null:this.store.dispatch(new S)},e.decorators=[{type:n.Injectable}],e.ctorParameters=function(){return[{type:o.Store}]},e}(),O=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"roles",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],data:{requiredPolicy:"AbpIdentity.Roles"},children:[{path:"",component:z,resolve:[j]}]},{path:"users",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],data:{requiredPolicy:"AbpIdentity.Users"},children:[{path:"",component:D,resolve:[j,q]}]}],F=function(){function e(){}return e.decorators=[{type:n.NgModule,args:[{imports:[l.RouterModule.forChild(O)],exports:[l.RouterModule],providers:[j,q]}]}],e}(),T=function(){function e(){}return e.decorators=[{type:n.NgModule,args:[{declarations:[z,D],imports:[o.NgxsModule.forFeature([M]),t.CoreModule,F,c.NgbTabsetModule,s.ThemeSharedModule,b.TableModule,c.NgbDropdownModule,u.PermissionManagementModule,p.NgxValidateCoreModule,y.PerfectScrollbarModule]}]}],e}();!function(e){e.State=function(){},e.RoleSaveRequest=function(){},e.RoleItem=function(){},e.UserItem=function(){},e.User=function(){},e.UserSaveRequest=function(){}}(v||(v={})),e.IDENTITY_ROUTES=[{name:"Administration",path:"",order:1,wrapper:!0},{name:"Identity",path:"identity",order:1,parentName:"Administration",layout:"application",children:[{path:"roles",name:"Roles",order:2,requiredPolicy:"AbpIdentity.Roles"},{path:"users",name:"Users",order:1,requiredPolicy:"AbpIdentity.Users"}]}],e.IdentityAddRole=R,e.IdentityAddUser=x,e.IdentityDeleteRole=A,e.IdentityDeleteUser=N,e.IdentityGetRoleById=w,e.IdentityGetRoles=I,e.IdentityGetUserById=L,e.IdentityGetUserRoles=k,e.IdentityGetUsers=S,e.IdentityModule=T,e.IdentityService=P,e.IdentityState=M,e.IdentityUpdateRole=U,e.IdentityUpdateUser=C,e.RoleResolver=j,e.RolesComponent=z,e.ɵb=D,e.ɵc=F,e.ɵd=q,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.identity.umd.min.js.map