!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ngxs/store"),require("rxjs"),require("rxjs/operators"),require("ngx-perfect-scrollbar")):"function"==typeof define&&define.amd?define("@abp/ng.permission-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ngxs/store","rxjs","rxjs/operators","ngx-perfect-scrollbar"],n):n(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["permission-management"]={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.store,e.rxjs,e.rxjs.operators,e.ngxPerfectScrollbar)}(this,function(e,n,t,i,s,r,o,a){"use strict";var c=function(){return(c=Object.assign||function(e){for(var n,t=1,i=arguments.length;t<i;t++)for(var s in n=arguments[t])Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s]);return e}).apply(this,arguments)};function l(e,n,t,i){var s,r=arguments.length,o=r<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(r<3?s(o):r>3?s(n,t,o):s(n,t))||o);return r>3&&o&&Object.defineProperty(n,t,o),o}function p(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)}function u(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var i,s,r=t.call(e),o=[];try{for(;(void 0===n||n-- >0)&&!(i=r.next()).done;)o.push(i.value)}catch(e){s={error:e}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(s)throw s.error}}return o}function m(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(u(arguments[n]));return e}var d=function(){function e(e){this.payload=e}return e.type="[PermissionManagement] Get Permissions",e}(),b=function(){function e(e){this.payload=e}return e.type="[PermissionManagement] Update Permissions",e}(),f=function(){function e(e){this.rest=e}return e.prototype.getPermissions=function(e){var n={method:"GET",url:"/api/abp/permissions",params:e};return this.rest.request(n)},e.prototype.updatePermissions=function(e){var n={method:"PUT",url:"/api/abp/permissions",body:{permissions:e.permissions},params:{providerKey:e.providerKey,providerName:e.providerName}};return this.rest.request(n)},e.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:n.RestService}]},e.ngInjectableDef=i.ɵɵdefineInjectable({factory:function(){return new e(i.ɵɵinject(n.RestService))},token:e,providedIn:"root"}),e}(),h=function(){function e(e){this.permissionManagementService=e}return e.getPermissionGroups=function(e){return e.permissionRes.groups||[]},e.getEntitiyDisplayName=function(e){return e.permissionRes.entityDisplayName},e.prototype.permissionManagementGet=function(e,n){var t=e.patchState,i=n.payload;return this.permissionManagementService.getPermissions(i).pipe(o.tap(function(e){return t({permissionRes:e})}))},e.prototype.permissionManagementUpdate=function(e,n){var t=n.payload;return this.permissionManagementService.updatePermissions(t)},l([s.Action(d),p("design:type",Function),p("design:paramtypes",[Object,d]),p("design:returntype",void 0)],e.prototype,"permissionManagementGet",null),l([s.Action(b),p("design:type",Function),p("design:paramtypes",[Object,b]),p("design:returntype",void 0)],e.prototype,"permissionManagementUpdate",null),l([s.Selector(),p("design:type",Function),p("design:paramtypes",[Object]),p("design:returntype",void 0)],e,"getPermissionGroups",null),l([s.Selector(),p("design:type",Function),p("design:paramtypes",[Object]),p("design:returntype",String)],e,"getEntitiyDisplayName",null),e=l([s.State({name:"PermissionManagementState",defaults:{permissionRes:{}}}),p("design:paramtypes",[f])],e)}(),g=function(){function e(e,n){this.store=e,this.renderer=n,this.visibleChange=new i.EventEmitter,this.permissions=[],this.selectThisTab=!1,this.selectAllTab=!1,this.trackByFn=function(e,n){return n.name}}return Object.defineProperty(e.prototype,"visible",{get:function(){return this._visible},set:function(e){this.selectedGroup&&(this._visible=e,this.visibleChange.emit(e),e||(this.selectedGroup=null))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectedGroupPermissions$",{get:function(){var e=this;return this.groups$.pipe(o.map(function(n){return e.selectedGroup?n.find(function(n){return n.name===e.selectedGroup.name}).permissions:[]}),o.map(function(n){return n.map(function(t){return c({},t,{margin:y(n,t),isGranted:e.permissions.find(function(e){return e.name===t.name}).isGranted})})}))},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){},e.prototype.getChecked=function(e){return(this.permissions.find(function(n){return n.name===e})||{isGranted:!1}).isGranted},e.prototype.onClickCheckbox=function(e,n){var t=this;setTimeout(function(){t.permissions=t.permissions.map(function(n){return e.name===n.name?c({},n,{isGranted:!n.isGranted}):e.name===n.parentName&&e.isGranted?c({},n,{isGranted:!1}):e.parentName!==n.name||e.isGranted?n:c({},n,{isGranted:!0})}),t.setTabCheckboxState(),t.setGrantCheckboxState()},0)},e.prototype.setTabCheckboxState=function(){var e=this;this.selectedGroupPermissions$.pipe(o.take(1)).subscribe(function(n){var t=n.filter(function(e){return e.isGranted}),i=document.querySelector("#select-all-in-this-tabs");t.length===n.length?(i.indeterminate=!1,e.selectThisTab=!0):0===t.length?(i.indeterminate=!1,e.selectThisTab=!1):i.indeterminate=!0})},e.prototype.setGrantCheckboxState=function(){var e=this.permissions.filter(function(e){return e.isGranted}),n=document.querySelector("#select-all-in-all-tabs");e.length===this.permissions.length?(n.indeterminate=!1,this.selectAllTab=!0):0===e.length?(n.indeterminate=!1,this.selectAllTab=!1):n.indeterminate=!0},e.prototype.onClickSelectThisTab=function(){var e=this;this.selectedGroupPermissions$.pipe(o.take(1)).subscribe(function(n){n.forEach(function(n){var t=e.permissions.findIndex(function(e){return e.name===n.name});e.permissions=m(e.permissions.slice(0,t),[c({},e.permissions[t],{isGranted:!e.selectThisTab})],e.permissions.slice(t+1))})}),this.setGrantCheckboxState()},e.prototype.onClickSelectAll=function(){var e=this;this.permissions=this.permissions.map(function(n){return c({},n,{isGranted:!e.selectAllTab})}),this.selectThisTab=!this.selectAllTab},e.prototype.onChangeGroup=function(e){this.selectedGroup=e,this.setTabCheckboxState()},e.prototype.onSubmit=function(){var e=this,n=v(this.store.selectSnapshot(h.getPermissionGroups)),t=this.permissions.filter(function(e){return n.find(function(n){return n.name===e.name}).isGranted!==e.isGranted}).map(function(e){return{name:e.name,isGranted:e.isGranted}});t.length?this.store.dispatch(new b({providerKey:this.providerKey,providerName:this.providerName,permissions:t})).subscribe(function(){e.visible=!1}):this.visible=!1},e.prototype.openModal=function(){var e=this;if(!this.providerKey||!this.providerName)throw new Error("Provider Key and Provider Name are required.");this.store.dispatch(new d({providerKey:this.providerKey,providerName:this.providerName})).pipe(o.pluck("PermissionManagementState","permissionRes")).subscribe(function(n){e.selectedGroup=n.groups[0],e.permissions=v(n.groups),e.visible=!0,setTimeout(function(){e.setTabCheckboxState(),e.setGrantCheckboxState()},0)})},e.prototype.ngOnChanges=function(e){var n=e.visible;n&&(n.currentValue?this.openModal():!1===n.currentValue&&this.visible&&(this.visible=!1))},e.decorators=[{type:i.Component,args:[{selector:"abp-permission-management",template:'<abp-modal [(visible)]="visible" *ngIf="visible" size="lg">\n  <ng-container *ngIf="{ entityName: entityName$ | async } as data">\n    <ng-template #abpHeader>\n      <h4>{{ \'AbpPermissionManagement::Permissions\' | abpLocalization }} - {{ data.entityName }}</h4>\n    </ng-template>\n    <ng-template #abpBody>\n      <div class="custom-checkbox custom-control mb-2">\n        <input\n          type="checkbox"\n          id="select-all-in-all-tabs"\n          name="select-all-in-all-tabs"\n          class="custom-control-input"\n          [(ngModel)]="selectAllTab"\n          (click)="onClickSelectAll()"\n        />\n        <label class="custom-control-label" for="select-all-in-all-tabs">{{\n          \'AbpPermissionManagement::SelectAllInAllTabs\' | abpLocalization\n        }}</label>\n      </div>\n\n      <hr class="mt-2 mb-2" />\n      <div class="row">\n        <div class="col-4">\n          <ul class="nav nav-pills flex-column">\n            <perfect-scrollbar class="ps-show-always" style="max-height: 70vh;">\n              <li *ngFor="let group of groups$ | async; trackBy: trackByFn" class="nav-item">\n                <a class="nav-link" [class.active]="selectedGroup.name === group.name" (click)="onChangeGroup(group)">{{\n                  group?.displayName\n                }}</a>\n              </li>\n            </perfect-scrollbar>\n          </ul>\n        </div>\n        <div class="col-8">\n          <h4>{{ selectedGroup.displayName }}</h4>\n          <hr class="mt-2 mb-3" />\n          <div class="pl-1 pt-1">\n            <div class="custom-checkbox custom-control mb-2">\n              <input\n                type="checkbox"\n                id="select-all-in-this-tabs"\n                name="select-all-in-this-tabs"\n                class="custom-control-input"\n                [(ngModel)]="selectThisTab"\n                (click)="onClickSelectThisTab()"\n              />\n              <label class="custom-control-label" for="select-all-in-this-tabs">{{\n                \'AbpPermissionManagement::SelectAllInThisTab\' | abpLocalization\n              }}</label>\n            </div>\n            <hr class="mb-3" />\n            <perfect-scrollbar class="ps-show-always" style="max-height: 60vh;">\n              <div\n                *ngFor="let permission of selectedGroupPermissions$ | async; let i = index; trackBy: trackByFn"\n                [style.margin-left]="permission.margin + \'px\'"\n                class="custom-checkbox custom-control mb-2"\n              >\n                <input\n                  #permissionCheckbox\n                  type="checkbox"\n                  [checked]="getChecked(permission.name)"\n                  [value]="getChecked(permission.name)"\n                  [attr.id]="permission.name"\n                  class="custom-control-input"\n                />\n                <label\n                  class="custom-control-label"\n                  [attr.for]="permission.name"\n                  (click)="onClickCheckbox(permission, permissionCheckbox.value)"\n                  >{{ permission.displayName }}</label\n                >\n              </div>\n            </perfect-scrollbar>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #abpFooter>\n      <button type="button" class="btn btn-secondary" #abpClose>\n        {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n      </button>\n      <button type="submit" class="btn btn-primary" (click)="onSubmit()">\n        <i class="fa fa-check mr-1"></i> <span>{{ \'AbpIdentity::Save\' | abpLocalization }}</span>\n      </button>\n    </ng-template>\n  </ng-container>\n</abp-modal>\n'}]}],e.ctorParameters=function(){return[{type:s.Store},{type:i.Renderer2}]},e.propDecorators={providerName:[{type:i.Input}],providerKey:[{type:i.Input}],visible:[{type:i.Input}],visibleChange:[{type:i.Output}]},l([s.Select(h.getPermissionGroups),p("design:type",r.Observable)],e.prototype,"groups$",void 0),l([s.Select(h.getEntitiyDisplayName),p("design:type",r.Observable)],e.prototype,"entityName$",void 0),e}();function y(e,n){var t=e.find(function(e){return e.name===n.parentName});return t&&t.parentName?20+y(e,t):t?20:0}function v(e){return e.reduce(function(e,n){return m(e,n.permissions)},[])}var G,P=function(){function e(){}return e.decorators=[{type:i.NgModule,args:[{declarations:[g],imports:[n.CoreModule,t.ThemeSharedModule,s.NgxsModule.forFeature([h]),a.PerfectScrollbarModule],exports:[g]}]}],e}();!function(e){e.State=function(){},e.Response=function(){},e.Group=function(){},e.MinimumPermission=function(){},e.Permission=function(){},e.GrantedProvider=function(){},e.UpdateRequest=function(){}}(G||(G={})),e.PermissionManagementComponent=g,e.PermissionManagementGetPermissions=d,e.PermissionManagementModule=P,e.PermissionManagementService=f,e.PermissionManagementState=h,e.PermissionManagementUpdatePermissions=b,e.ɵa=g,e.ɵb=h,e.ɵc=f,e.ɵd=d,e.ɵe=b,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.permission-management.umd.min.js.map