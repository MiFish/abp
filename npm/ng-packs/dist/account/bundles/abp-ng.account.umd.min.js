!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@abp/ng.core"),require("@angular/core"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("@abp/ng.theme.shared"),require("rxjs/operators"),require("snq"),require("@ngx-validate/core"),require("@ng-bootstrap/ng-bootstrap"),require("primeng/table")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@angular/core","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","@abp/ng.theme.shared","rxjs/operators","snq","@ngx-validate/core","@ng-bootstrap/ng-bootstrap","primeng/table"],n):n(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.account={}),e.ng_core,e.ng.core,e.ng.router,e.ng.forms,e.routerPlugin,e.store,e.angularOauth2Oidc,e.rxjs,e.ng_theme_shared,e.rxjs.operators,e.snq,e.core$1,e.ngBootstrap,e.table)}(this,function(e,n,t,o,r,a,i,s,l,c,p,u,d,m,b){"use strict";u=u&&u.hasOwnProperty("default")?u.default:u;var f=function(){return(f=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}).apply(this,arguments)},g=r.Validators.maxLength,h=(r.Validators.minLength,r.Validators.required),v=function(){function e(e,t,o,r,a){this.fb=e,this.oauthService=t,this.store=o,this.toasterService=r,this.options=a,this.oauthService.configure(this.store.selectSnapshot(n.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[h,g(255)]],password:["",[h,g(32)]],remember:[!1]})}return e.prototype.onSubmit=function(){var e=this;this.form.invalid||(this.oauthService.setStorage(this.form.value.remember?localStorage:sessionStorage),this.inProgress=!0,l.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value)).pipe(p.switchMap(function(){return e.store.dispatch(new n.ConfigGetAppConfiguration)}),p.tap(function(){var n=u(function(){return window.history.state}).redirectUrl||(e.options||{}).redirectUrl||"/";e.store.dispatch(new a.Navigate([n]))}),p.catchError(function(n){return e.toasterService.error(u(function(){return n.error.error_description},"An error occured."),"Error"),l.throwError(n)}),p.finalize(function(){return e.inProgress=!1})).subscribe())},e.decorators=[{type:t.Component,args:[{selector:"abp-login",template:'<div class="row">\n  <div class="col col-md-4 offset-md-4">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <h2>{{ \'AbpAccount::Login\' | abpLocalization }}</h2>\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\n        <div class="form-group">\n          <label for="login-input-user-name-or-email-address">{{\n            \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\n          }}</label>\n          <input\n            class="form-control"\n            type="text"\n            id="login-input-user-name-or-email-address"\n            formControlName="username"\n          />\n        </div>\n        <div class="form-group">\n          <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\n          <input class="form-control" type="password" id="login-input-password" formControlName="password" />\n        </div>\n        <div class="form-check" validationTarget validationStyle>\n          <label class="form-check-label" for="login-input-remember-me">\n            <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\n            {{ \'AbpAccount::RememberMe\' | abpLocalization }}\n          </label>\n        </div>\n        <div class="mt-2">\n          <button type="button" name="Action" value="Cancel" class="btn btn-secondary">\n            {{ \'AbpAccount::Cancel\' | abpLocalization }}\n          </button>\n          <button [disabled]="inProgress" type="submit" name="Action" value="Login" class="btn btn-primary ml-1">\n            {{ \'AbpAccount::Login\' | abpLocalization }}\n          </button>\n        </div>\n      </form>\n      <div style="padding-top: 20px">\n        <a routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:r.FormBuilder},{type:s.OAuthService},{type:i.Store},{type:c.ToasterService},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["ACCOUNT_OPTIONS"]}]}]},e}(),y=r.Validators.maxLength,S=r.Validators.minLength,C=r.Validators.required,A=r.Validators.email,w=function(){function e(e,n,t){this.fb=e,this.oauthService=n,this.router=t,this.form=this.fb.group({username:["",[C,y(255)]],password:["",[C,y(32),S(6),d.validatePassword(["small","capital","number","special"])]],email:["",[C,A]]})}return e.prototype.onSubmit=function(){this.form.invalid},e.decorators=[{type:t.Component,args:[{selector:"abp-register",template:'<div class="row">\n  <div class="col col-md-4 offset-md-4">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <h2>Register</h2>\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\n        <div class="form-group">\n          <label for="input-user-name">User name</label><span> * </span\n          ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\n        </div>\n        <div class="form-group">\n          <label for="input-email-address">Email address</label><span> * </span\n          ><input type="email" id="input-email-address" class="form-control" formControlName="email" />\n        </div>\n        <div class="form-group">\n          <label for="input-password">Password</label><span> * </span\n          ><input type="password" id="input-password" class="form-control" formControlName="password" />\n        </div>\n        <button type="submit" class="btn btn-primary">Register</button>\n      </form>\n    </div>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:r.FormBuilder},{type:s.OAuthService},{type:o.Router}]},e}(),x=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:n.DynamicLayoutComponent,children:[{path:"login",component:v},{path:"register",component:w}]}],T=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[o.RouterModule.forChild(x)],exports:[o.RouterModule]}]}],e}(),O=function(){function e(e,n){this.modalService=e,this.fb=n}return e.prototype.createForm=function(){this.form=this.fb.group({name:[this.selected.name]})},e.prototype.openModal=function(){this.createForm(),this.modalService.open(this.modalContent)},e.prototype.onSwitch=function(){this.selected={},this.openModal()},e.prototype.save=function(){this.selected=this.form.value,this.modalService.dismissAll()},e.decorators=[{type:t.Component,args:[{selector:"abp-tenant-box",template:'<div\n  class="tenant-switch-box"\n  style="background-color: #eee; margin-bottom: 20px; color: #000; padding: 10px; text-align: center;"\n>\n  <span style="color: #666;">{{ \'AbpUiMultiTenancy::Tenant\' | abpLocalization }}: </span>\n  <strong>\n    <i>{{ selected?.name ? selected.name : (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}</i>\n  </strong>\n  (<a id="abp-tenant-switch-link" style="color: #333; cursor: pointer" (click)="onSwitch()">{{\n    \'AbpUiMultiTenancy::Switch\' | abpLocalization\n  }}</a\n  >)\n</div>\n\n<ng-template #modalContent let-modal>\n  <div class="modal-header">\n    <h5 class="modal-title" id="modal-basic-title">\n      SwitchTenant\n    </h5>\n    <button type="button" class="close" aria-label="Close" (click)="modal.dismiss()">\n      <span aria-hidden="true">&times;</span>\n    </button>\n  </div>\n  <form [formGroup]="form" (ngSubmit)="save()">\n    <div class="modal-body">\n      <div class="mt-2">\n        <div class="form-group">\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\n          <input type="text" id="name" class="form-control" formControlName="name" />\n        </div>\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\n      </div>\n    </div>\n\n    <div class="modal-footer">\n      <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="modal.close()">\n        {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n      </button>\n      <button type="submit" class="btn btn-primary">\n        <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\n      </button>\n    </div>\n  </form>\n</ng-template>\n'}]}],e.ctorParameters=function(){return[{type:m.NgbModal},{type:r.FormBuilder}]},e.propDecorators={modalContent:[{type:t.ViewChild,args:["modalContent",{static:!1}]}]},e}();function L(e){return f({redirectUrl:"/"},e)}var M=new t.InjectionToken("ACCOUNT_OPTIONS"),N=function(){function e(){}return e.forRoot=function(n){return void 0===n&&(n={}),{ngModule:e,providers:[{provide:M,useValue:n},{provide:"ACCOUNT_OPTIONS",useFactory:L,deps:[M]}]}},e.decorators=[{type:t.NgModule,args:[{declarations:[v,w,O],imports:[n.CoreModule,T,c.ThemeSharedModule,b.TableModule,m.NgbDropdownModule,d.NgxValidateCoreModule],exports:[]}]}],e}();e.ACCOUNT_OPTIONS=M,e.ACCOUNT_ROUTES=[{name:"Account",path:"account",invisible:!0,layout:"application",children:[{path:"login",name:"Login",order:1},{path:"register",name:"Register",order:2}]}],e.AccountModule=N,e.LoginComponent=v,e.RegisterComponent=w,e.optionsFactory=L,e.ɵa=v,e.ɵc=w,e.ɵd=O,e.ɵe=T,e.ɵf=L,e.ɵg=M,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.account.umd.min.js.map