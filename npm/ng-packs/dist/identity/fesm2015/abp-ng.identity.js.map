{"version":3,"file":"abp-ng.identity.js","sources":["ng://@abp/ng.identity/lib/actions/identity.actions.ts","ng://@abp/ng.identity/lib/services/identity.service.ts","ng://@abp/ng.identity/lib/states/identity.state.ts","ng://@abp/ng.identity/lib/components/roles/roles.component.ts","ng://@abp/ng.identity/lib/resolvers/roles.resolver.ts","ng://@abp/ng.identity/lib/components/users/users.component.ts","ng://@abp/ng.identity/lib/resolvers/users.resolver.ts","ng://@abp/ng.identity/lib/identity-routing.module.ts","ng://@abp/ng.identity/lib/identity.module.ts","ng://@abp/ng.identity/lib/constants/routes.ts","ng://@abp/ng.identity/lib/models/identity.ts"],"sourcesContent":["import { Identity } from '../models/identity';\nimport { ABP } from '@abp/ng.core';\n\nexport class IdentityGetRoles {\n  static readonly type = '[Identity] Get Roles';\n}\n\nexport class IdentityGetRoleById {\n  static readonly type = '[Identity] Get Role By Id';\n  constructor(public payload: string) {}\n}\n\nexport class IdentityDeleteRole {\n  static readonly type = '[Identity] Delete Role';\n  constructor(public payload: string) {}\n}\n\nexport class IdentityAddRole {\n  static readonly type = '[Identity] Add Role';\n  constructor(public payload: Identity.RoleSaveRequest) {}\n}\n\nexport class IdentityUpdateRole {\n  static readonly type = '[Identity] Update Role';\n  constructor(public payload: Identity.RoleItem) {}\n}\n\nexport class IdentityGetUsers {\n  static readonly type = '[Identity] Get Users';\n  constructor(public payload?: ABP.PageQueryParams) {}\n}\n\nexport class IdentityGetUserById {\n  static readonly type = '[Identity] Get User By Id';\n  constructor(public payload: string) {}\n}\n\nexport class IdentityDeleteUser {\n  static readonly type = '[Identity] Delete User';\n  constructor(public payload: string) {}\n}\n\nexport class IdentityAddUser {\n  static readonly type = '[Identity] Add User';\n  constructor(public payload: Identity.UserSaveRequest) {}\n}\n\nexport class IdentityUpdateUser {\n  static readonly type = '[Identity] Update User';\n  constructor(public payload: Identity.UserSaveRequest & { id: string }) {}\n}\n\nexport class IdentityGetUserRoles {\n  static readonly type = '[Identity] Get User Roles';\n  constructor(public payload: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RestService, Rest, ABP } from '@abp/ng.core';\nimport { Identity } from '../models/identity';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IdentityService {\n  constructor(private rest: RestService) {}\n\n  getRoles(): Observable<Identity.RoleResponse> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: '/api/identity/roles',\n    };\n\n    return this.rest.request<null, Identity.RoleResponse>(request);\n  }\n\n  getRoleById(id: string): Observable<Identity.RoleItem> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: `/api/identity/roles/${id}`,\n    };\n\n    return this.rest.request<null, Identity.RoleItem>(request);\n  }\n\n  deleteRole(id: string): Observable<Identity.RoleItem> {\n    const request: Rest.Request<null> = {\n      method: 'DELETE',\n      url: `/api/identity/roles/${id}`,\n    };\n\n    return this.rest.request<null, Identity.RoleItem>(request);\n  }\n\n  addRole(body: Identity.RoleSaveRequest): Observable<Identity.RoleItem> {\n    const request: Rest.Request<Identity.RoleSaveRequest> = {\n      method: 'POST',\n      url: '/api/identity/roles',\n      body,\n    };\n\n    return this.rest.request<Identity.RoleSaveRequest, Identity.RoleItem>(request);\n  }\n\n  updateRole(body: Identity.RoleItem): Observable<Identity.RoleItem> {\n    const url = `/api/identity/roles/${body.id}`;\n    delete body.id;\n\n    const request: Rest.Request<Identity.RoleItem> = {\n      method: 'PUT',\n      url,\n      body,\n    };\n\n    return this.rest.request<Identity.RoleItem, Identity.RoleItem>(request);\n  }\n\n  getUsers(params = {} as ABP.PageQueryParams): Observable<Identity.UserResponse> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: '/api/identity/users',\n      params,\n    };\n\n    return this.rest.request<null, Identity.UserResponse>(request);\n  }\n\n  getUserById(id: string): Observable<Identity.UserItem> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: `/api/identity/users/${id}`,\n    };\n\n    return this.rest.request<null, Identity.UserItem>(request);\n  }\n\n  getUserRoles(id: string): Observable<Identity.RoleResponse> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: `/api/identity/users/${id}/roles`,\n    };\n\n    return this.rest.request<null, Identity.RoleResponse>(request);\n  }\n\n  deleteUser(id: string): Observable<null> {\n    const request: Rest.Request<null> = {\n      method: 'DELETE',\n      url: `/api/identity/users/${id}`,\n    };\n\n    return this.rest.request<null, null>(request);\n  }\n\n  addUser(body: Identity.UserSaveRequest): Observable<Identity.UserItem> {\n    const request: Rest.Request<Identity.UserSaveRequest> = {\n      method: 'POST',\n      url: '/api/identity/users',\n      body,\n    };\n\n    return this.rest.request<Identity.UserSaveRequest, Identity.UserItem>(request);\n  }\n\n  updateUser(body: Identity.UserItem): Observable<Identity.UserItem> {\n    const url = `/identity/users/${body.id}`;\n    delete body.id;\n\n    const request: Rest.Request<Identity.UserItem> = {\n      method: 'PUT',\n      url,\n      body,\n    };\n\n    return this.rest.request<Identity.UserItem, Identity.UserItem>(request);\n  }\n}\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { switchMap, tap, pluck } from 'rxjs/operators';\nimport {\n  IdentityAddRole,\n  IdentityAddUser,\n  IdentityDeleteRole,\n  IdentityDeleteUser,\n  IdentityGetRoleById,\n  IdentityGetRoles,\n  IdentityGetUserById,\n  IdentityGetUsers,\n  IdentityUpdateRole,\n  IdentityUpdateUser,\n  IdentityGetUserRoles,\n} from '../actions/identity.actions';\nimport { Identity } from '../models/identity';\nimport { IdentityService } from '../services/identity.service';\n\n@State<Identity.State>({\n  name: 'IdentityState',\n  defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} } as Identity.State,\n})\nexport class IdentityState {\n  @Selector()\n  static getRoles({ roles }: Identity.State): Identity.RoleItem[] {\n    return roles.items;\n  }\n\n  @Selector()\n  static getRolesTotalCount({ roles }: Identity.State): number {\n    return roles.totalCount;\n  }\n\n  @Selector()\n  static getUsers({ users }: Identity.State): Identity.UserItem[] {\n    return users.items;\n  }\n\n  @Selector()\n  static getUsersTotalCount({ users }: Identity.State): number {\n    return users.totalCount;\n  }\n\n  constructor(private identityService: IdentityService) {}\n\n  @Action(IdentityGetRoles)\n  getRoles({ patchState }: StateContext<Identity.State>) {\n    return this.identityService.getRoles().pipe(\n      tap(roles =>\n        patchState({\n          roles,\n        }),\n      ),\n    );\n  }\n\n  @Action(IdentityGetRoleById)\n  getRole({ patchState }: StateContext<Identity.State>, { payload }: IdentityGetRoleById) {\n    return this.identityService.getRoleById(payload).pipe(\n      tap(selectedRole =>\n        patchState({\n          selectedRole,\n        }),\n      ),\n    );\n  }\n\n  @Action(IdentityDeleteRole)\n  deleteRole({ dispatch }: StateContext<Identity.State>, { payload }: IdentityGetRoleById) {\n    return this.identityService.deleteRole(payload).pipe(switchMap(() => dispatch(new IdentityGetRoles())));\n  }\n\n  @Action(IdentityAddRole)\n  addRole({ dispatch }: StateContext<Identity.State>, { payload }: IdentityAddRole) {\n    return this.identityService.addRole(payload).pipe(switchMap(() => dispatch(new IdentityGetRoles())));\n  }\n\n  @Action(IdentityUpdateRole)\n  updateRole({ getState, dispatch }: StateContext<Identity.State>, { payload }: IdentityUpdateRole) {\n    return dispatch(new IdentityGetRoleById(payload.id)).pipe(\n      switchMap(() => this.identityService.updateRole({ ...getState().selectedRole, ...payload })),\n      switchMap(() => dispatch(new IdentityGetRoles())),\n    );\n  }\n\n  @Action(IdentityGetUsers)\n  getUsers({ patchState }: StateContext<Identity.State>, { payload }: IdentityGetUsers) {\n    return this.identityService.getUsers(payload).pipe(\n      tap(users =>\n        patchState({\n          users,\n        }),\n      ),\n    );\n  }\n\n  @Action(IdentityGetUserById)\n  getUser({ patchState }: StateContext<Identity.State>, { payload }: IdentityGetUserById) {\n    return this.identityService.getUserById(payload).pipe(\n      tap(selectedUser =>\n        patchState({\n          selectedUser,\n        }),\n      ),\n    );\n  }\n\n  @Action(IdentityDeleteUser)\n  deleteUser({ dispatch }: StateContext<Identity.State>, { payload }: IdentityGetUserById) {\n    return this.identityService.deleteUser(payload).pipe(switchMap(() => dispatch(new IdentityGetUsers())));\n  }\n\n  @Action(IdentityAddUser)\n  addUser({ dispatch }: StateContext<Identity.State>, { payload }: IdentityAddUser) {\n    return this.identityService.addUser(payload).pipe(switchMap(() => dispatch(new IdentityGetUsers())));\n  }\n\n  @Action(IdentityUpdateUser)\n  updateUser({ getState, dispatch }: StateContext<Identity.State>, { payload }: IdentityUpdateUser) {\n    return dispatch(new IdentityGetUserById(payload.id)).pipe(\n      switchMap(() => this.identityService.updateUser({ ...getState().selectedUser, ...payload })),\n      switchMap(() => dispatch(new IdentityGetUsers())),\n    );\n  }\n\n  @Action(IdentityGetUserRoles)\n  getUserRoles({ patchState }: StateContext<Identity.State>, { payload }: IdentityGetUserRoles) {\n    return this.identityService.getUserRoles(payload).pipe(\n      pluck('items'),\n      tap(selectedUserRoles =>\n        patchState({\n          selectedUserRoles,\n        }),\n      ),\n    );\n  }\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IdentityState } from '../../states/identity.state';\nimport { Identity } from '../../models/identity';\nimport {\n  IdentityUpdateRole,\n  IdentityAddRole,\n  IdentityDeleteRole,\n  IdentityGetRoleById,\n} from '../../actions/identity.actions';\nimport { pluck } from 'rxjs/operators';\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\n\n@Component({\n  selector: 'abp-roles',\n  templateUrl: './roles.component.html',\n})\nexport class RolesComponent {\n  @Select(IdentityState.getRoles)\n  roles$: Observable<Identity.RoleItem[]>;\n\n  form: FormGroup;\n\n  selected: Identity.RoleItem;\n\n  isModalVisible: boolean;\n\n  visiblePermissions: boolean = false;\n\n  providerKey: string;\n\n  @ViewChild('modalContent', { static: false })\n  modalContent: TemplateRef<any>;\n\n  constructor(private confirmationService: ConfirmationService, private fb: FormBuilder, private store: Store) {}\n\n  createForm() {\n    this.form = this.fb.group({\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\n      isDefault: [this.selected.isDefault || false],\n      isPublic: [this.selected.isPublic || false],\n    });\n  }\n\n  openModal() {\n    this.createForm();\n    this.isModalVisible = true;\n  }\n\n  onAdd() {\n    this.selected = {} as Identity.RoleItem;\n    this.openModal();\n  }\n\n  onEdit(id: string) {\n    this.store\n      .dispatch(new IdentityGetRoleById(id))\n      .pipe(pluck('IdentityState', 'selectedRole'))\n      .subscribe(selectedRole => {\n        this.selected = selectedRole;\n        this.openModal();\n      });\n  }\n\n  save() {\n    if (!this.form.valid) return;\n\n    this.store\n      .dispatch(\n        this.selected.id\n          ? new IdentityUpdateRole({ ...this.form.value, id: this.selected.id })\n          : new IdentityAddRole(this.form.value),\n      )\n      .subscribe(() => {\n        this.isModalVisible = false;\n      });\n  }\n\n  delete(id: string, name: string) {\n    this.confirmationService\n      .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n        messageLocalizationParams: [name],\n      })\n      .subscribe((status: Toaster.Status) => {\n        if (status === Toaster.Status.confirm) {\n          this.store.dispatch(new IdentityDeleteRole(id));\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { IdentityGetRoles } from '../actions/identity.actions';\nimport { Identity } from '../models/identity';\nimport { IdentityState } from '../states/identity.state';\n\n@Injectable()\nexport class RoleResolver implements Resolve<Identity.State> {\n  constructor(private store: Store) {}\n\n  resolve() {\n    const roles = this.store.selectSnapshot(IdentityState.getRoles);\n    return roles && roles.length ? null : this.store.dispatch(new IdentityGetRoles());\n  }\n}\n","import { ABP } from '@abp/ng.core';\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\nimport { Component, OnInit, TemplateRef, TrackByFunction, ViewChild } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { validatePassword } from '@ngx-validate/core';\nimport { Select, Store } from '@ngxs/store';\nimport { combineLatest, Observable, Subject } from 'rxjs';\nimport { debounceTime, filter, map, pluck, take } from 'rxjs/operators';\nimport snq from 'snq';\nimport {\n  IdentityAddUser,\n  IdentityDeleteUser,\n  IdentityGetUserById,\n  IdentityGetUserRoles,\n  IdentityGetUsers,\n  IdentityUpdateUser,\n} from '../../actions/identity.actions';\nimport { Identity } from '../../models/identity';\nimport { IdentityState } from '../../states/identity.state';\n@Component({\n  selector: 'abp-users',\n  templateUrl: './users.component.html',\n})\nexport class UsersComponent implements OnInit {\n  @Select(IdentityState.getUsers)\n  data$: Observable<Identity.UserItem[]>;\n\n  @Select(IdentityState.getUsersTotalCount)\n  totalCount$: Observable<number>;\n\n  @ViewChild('modalContent', { static: false })\n  modalContent: TemplateRef<any>;\n\n  form: FormGroup;\n\n  selected: Identity.UserItem;\n\n  selectedUserRoles: Identity.RoleItem[];\n\n  roles: Identity.RoleItem[];\n\n  visiblePermissions: boolean = false;\n\n  providerKey: string;\n\n  pageQuery: ABP.PageQueryParams = {\n    sorting: 'userName',\n  };\n\n  isModalVisible: boolean;\n\n  loading: boolean = false;\n\n  search$ = new Subject<string>();\n\n  trackByFn: TrackByFunction<AbstractControl> = (index, item) => Object.keys(item)[0] || index;\n\n  get roleGroups(): FormGroup[] {\n    return snq(() => (this.form.get('roleNames') as FormArray).controls as FormGroup[], []);\n  }\n\n  constructor(private confirmationService: ConfirmationService, private fb: FormBuilder, private store: Store) {}\n\n  ngOnInit() {\n    this.search$.pipe(debounceTime(300)).subscribe(value => {\n      this.pageQuery.filter = value;\n      this.get();\n    });\n  }\n\n  buildForm() {\n    this.roles = this.store.selectSnapshot(IdentityState.getRoles);\n\n    this.form = this.fb.group({\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.maxLength(32),\n          Validators.minLength(6),\n          validatePassword(['small', 'capital', 'number', 'special']),\n        ],\n      ],\n      userName: [this.selected.userName || '', [Validators.required, Validators.maxLength(256)]],\n      email: [this.selected.email || '', [Validators.required, Validators.email, Validators.maxLength(256)]],\n      name: [this.selected.name || '', [Validators.maxLength(64)]],\n      surname: [this.selected.surname || '', [Validators.maxLength(64)]],\n      phoneNumber: [this.selected.phoneNumber || '', [Validators.maxLength(16)]],\n      lockoutEnabled: [this.selected.twoFactorEnabled || (this.selected.id ? false : true)],\n      twoFactorEnabled: [this.selected.twoFactorEnabled || (this.selected.id ? false : true)],\n      roleNames: this.fb.array(\n        this.roles.map(role =>\n          this.fb.group({\n            [role.name]: [!!snq(() => this.selectedUserRoles.find(userRole => userRole.id === role.id))],\n          }),\n        ),\n      ),\n    });\n  }\n\n  openModal() {\n    this.buildForm();\n    this.isModalVisible = true;\n  }\n\n  onAdd() {\n    this.selected = {} as Identity.UserItem;\n    this.selectedUserRoles = [] as Identity.RoleItem[];\n    this.openModal();\n  }\n\n  onEdit(id: string) {\n    combineLatest([this.store.dispatch(new IdentityGetUserById(id)), this.store.dispatch(new IdentityGetUserRoles(id))])\n      .pipe(\n        filter(([res1, res2]) => res1 && res2),\n        map(([state, _]) => state),\n        pluck('IdentityState'),\n        take(1),\n      )\n      .subscribe((state: Identity.State) => {\n        this.selected = state.selectedUser;\n        this.selectedUserRoles = state.selectedUserRoles;\n        this.openModal();\n      });\n  }\n\n  save() {\n    if (!this.form.valid) return;\n\n    const { roleNames } = this.form.value;\n    const mappedRoleNames = snq(\n      () => roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]),\n      [],\n    );\n\n    this.store\n      .dispatch(\n        this.selected.id\n          ? new IdentityUpdateUser({\n              ...this.form.value,\n              id: this.selected.id,\n              roleNames: mappedRoleNames,\n            })\n          : new IdentityAddUser({\n              ...this.form.value,\n              roleNames: mappedRoleNames,\n            }),\n      )\n      .subscribe(() => {\n        this.isModalVisible = false;\n      });\n  }\n\n  delete(id: string, userName: string) {\n    this.confirmationService\n      .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\n        messageLocalizationParams: [userName],\n      })\n      .subscribe((status: Toaster.Status) => {\n        if (status === Toaster.Status.confirm) {\n          this.store.dispatch(new IdentityDeleteUser(id));\n        }\n      });\n  }\n\n  onPageChange(data) {\n    this.pageQuery.skipCount = data.first;\n    this.pageQuery.maxResultCount = data.rows;\n\n    this.get();\n  }\n\n  get() {\n    this.loading = true;\n    this.store.dispatch(new IdentityGetUsers(this.pageQuery)).subscribe(() => (this.loading = false));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { IdentityGetUsers } from '../actions/identity.actions';\nimport { Identity } from '../models/identity';\nimport { IdentityState } from '../states/identity.state';\n\n@Injectable()\nexport class UserResolver implements Resolve<Identity.State> {\n  constructor(private store: Store) {}\n\n  resolve() {\n    const users = this.store.selectSnapshot(IdentityState.getUsers);\n    return users && users.length ? null : this.store.dispatch(new IdentityGetUsers());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RolesComponent } from './components/roles/roles.component';\nimport { RoleResolver } from './resolvers/roles.resolver';\nimport { DynamicLayoutComponent, AuthGuard, PermissionGuard } from '@abp/ng.core';\nimport { UsersComponent } from './components/users/users.component';\nimport { UserResolver } from './resolvers/users.resolver';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'roles', pathMatch: 'full' },\n  {\n    path: 'roles',\n    component: DynamicLayoutComponent,\n    canActivate: [AuthGuard, PermissionGuard],\n    data: { requiredPolicy: 'AbpIdentity.Roles' },\n    children: [{ path: '', component: RolesComponent, resolve: [RoleResolver] }],\n  },\n  {\n    path: 'users',\n    component: DynamicLayoutComponent,\n    canActivate: [AuthGuard, PermissionGuard],\n    data: { requiredPolicy: 'AbpIdentity.Users' },\n    children: [\n      {\n        path: '',\n        component: UsersComponent,\n        resolve: [RoleResolver, UserResolver],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [RoleResolver, UserResolver],\n})\nexport class IdentityRoutingModule {}\n","import { CoreModule } from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { RolesComponent } from './components/roles/roles.component';\nimport { IdentityRoutingModule } from './identity-routing.module';\nimport { IdentityState } from './states/identity.state';\nimport { NgbTabsetModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { UsersComponent } from './components/users/users.component';\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\nimport { TableModule } from 'primeng/table';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\n\n@NgModule({\n  declarations: [RolesComponent, UsersComponent],\n  imports: [\n    NgxsModule.forFeature([IdentityState]),\n    CoreModule,\n    IdentityRoutingModule,\n    NgbTabsetModule,\n    ThemeSharedModule,\n    TableModule,\n    NgbDropdownModule,\n    PermissionManagementModule,\n    NgxValidateCoreModule,\n    PerfectScrollbarModule,\n  ],\n})\nexport class IdentityModule {}\n","import { eLayoutType, ABP } from '@abp/ng.core';\n\nexport const IDENTITY_ROUTES = [\n  {\n    name: 'Administration',\n    path: '',\n    order: 1,\n    wrapper: true,\n  },\n  {\n    name: 'Identity',\n    path: 'identity',\n    order: 1,\n    parentName: 'Administration',\n    layout: eLayoutType.application,\n    children: [\n      { path: 'roles', name: 'Roles', order: 2, requiredPolicy: 'AbpIdentity.Roles' },\n      { path: 'users', name: 'Users', order: 1, requiredPolicy: 'AbpIdentity.Users' },\n    ],\n  },\n] as ABP.FullRoute[];\n","import { ABP } from '@abp/ng.core';\n\nexport namespace Identity {\n  export interface State {\n    roles: RoleResponse;\n    users: UserResponse;\n    selectedRole: RoleItem;\n    selectedUser: UserItem;\n    selectedUserRoles: RoleItem[];\n  }\n\n  export type RoleResponse = ABP.PagedResponse<RoleItem>;\n\n  export interface RoleSaveRequest {\n    name: string;\n    isDefault: boolean;\n    isPublic: boolean;\n  }\n\n  export interface RoleItem extends RoleSaveRequest {\n    isStatic: boolean;\n    concurrencyStamp: string;\n    id: string;\n  }\n\n  export type UserResponse = ABP.PagedResponse<UserItem>;\n\n  export interface UserItem extends User {\n    tenantId: string;\n    emailConfirmed: boolean;\n    phoneNumberConfirmed: boolean;\n    isLockedOut: boolean;\n    concurrencyStamp: string;\n    id: string;\n  }\n\n  export interface User {\n    userName: string;\n    name: string;\n    surname: string;\n    email: string;\n    phoneNumber: string;\n    twoFactorEnabled: true;\n    lockoutEnabled: true;\n  }\n\n  export interface UserSaveRequest extends User {\n    password: string;\n    roleNames: string[];\n  }\n}\n"],"names":["tslib_1.__decorate"],"mappings":"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"}