!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("primeng/table"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@angular/core","@abp/ng.core","@abp/ng.theme.shared","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","primeng/table","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.account={}),e.ng.core,e.ng_core,e.ng_theme_shared,e.ngBootstrap,e.core$1,e.table,e.ng.router,e.ng.forms,e.routerPlugin,e.store,e.angularOauth2Oidc,e.rxjs,e.rxjs.operators,e.snq)}(this,function(e,t,n,r,o,a,i,s,c,u,p,l,d,m,b){"use strict";b=b&&b.hasOwnProperty("default")?b.default:b;var f=function(){return(f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function g(e){return f({redirectUrl:"/"},e)}var h=new t.InjectionToken("ACCOUNT_OPTIONS"),v=function(){function e(){}return e.forRoot=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:h,useValue:t},{provide:"ACCOUNT_OPTIONS",useFactory:g,deps:[h]}]}},e.decorators=[{type:t.NgModule,args:[{}]}],e}(),y=c.Validators.maxLength,S=(c.Validators.minLength,c.Validators.required),A=function(){function e(e,t,r,o,a){this.fb=e,this.oauthService=t,this.store=r,this.toasterService=o,this.options=a,this.oauthService.configure(this.store.selectSnapshot(n.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[S,y(255)]],password:["",[S,y(32)]],remember:[!1]})}return e.prototype.onSubmit=function(){var e=this;this.form.invalid||(this.inProgress=!0,d.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value)).pipe(m.switchMap(function(){return e.store.dispatch(new n.GetAppConfiguration)}),m.tap(function(){var t=b(function(){return window.history.state}).redirectUrl||(e.options||{}).redirectUrl||"/";e.store.dispatch(new u.Navigate([t]))}),m.catchError(function(t){return e.toasterService.error(b(function(){return t.error.error_description})||b(function(){return t.error.error.message},"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(t)}),m.finalize(function(){return e.inProgress=!1})).subscribe())},e.decorators=[{type:t.Component,args:[{selector:"abp-login",template:'<div class="row">\n  <div class="col col-md-4 offset-md-4">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <h2>{{ \'AbpAccount::Login\' | abpLocalization }}</h2>\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\n        <div class="form-group">\n          <label for="login-input-user-name-or-email-address">{{\n            \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\n          }}</label>\n          <input\n            class="form-control"\n            type="text"\n            id="login-input-user-name-or-email-address"\n            formControlName="username"\n            autofocus\n          />\n        </div>\n        <div class="form-group">\n          <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\n          <input class="form-control" type="password" id="login-input-password" formControlName="password" />\n        </div>\n        <div class="form-check" validationTarget validationStyle>\n          <label class="form-check-label" for="login-input-remember-me">\n            <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\n            {{ \'AbpAccount::RememberMe\' | abpLocalization }}\n          </label>\n        </div>\n        <div class="mt-2">\n          <abp-button [loading]="inProgress" type="submit">\n            {{ \'AbpAccount::Login\' | abpLocalization }}\n          </abp-button>\n        </div>\n      </form>\n      <div style="padding-top: 20px">\n        <a routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:l.OAuthService},{type:p.Store},{type:r.ToasterService},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["ACCOUNT_OPTIONS"]}]}]},e}();var w=function(){function e(e){this.rest=e}return e.prototype.findTenant=function(e){var t={method:"GET",url:"/api/abp/multi-tenancy/find-tenant/"+e};return this.rest.request(t)},e.prototype.register=function(e){var t={method:"POST",url:"/api/account/register",body:e};return this.rest.request(t,{skipHandleError:!0})},e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:n.RestService}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.RestService))},token:e,providedIn:"root"}),e}();var T=c.Validators.maxLength,x=(c.Validators.minLength,c.Validators.required),M=c.Validators.email,N=function(){function e(e,t,r,o,a){this.fb=e,this.accountService=t,this.oauthService=r,this.store=o,this.toasterService=a,this.oauthService.configure(this.store.selectSnapshot(n.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[x,T(255)]],password:["",[x,T(32)]],email:["",[x,M]]})}return e.prototype.onSubmit=function(){var e=this;if(!this.form.invalid){this.inProgress=!0;var t={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(t).pipe(m.switchMap(function(){return d.from(e.oauthService.fetchTokenUsingPasswordFlow(t.userName,t.password))}),m.switchMap(function(){return e.store.dispatch(new n.GetAppConfiguration)}),m.tap(function(){return e.store.dispatch(new u.Navigate(["/"]))}),m.take(1),m.catchError(function(t){return e.toasterService.error(b(function(){return t.error.error_description})||b(function(){return t.error.error.message},"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(t)}),m.finalize(function(){return e.inProgress=!1})).subscribe()}},e.decorators=[{type:t.Component,args:[{selector:"abp-register",template:'<div class="row">\n  <div class="col col-md-4 offset-md-4">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <h2>{{ \'AbpAccount::Register\' | abpLocalization }}</h2>\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\n        <div class="form-group">\n          <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\n          ><span> * </span\n          ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\n        </div>\n        <div class="form-group">\n          <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\n          ><span> * </span><input type="email" id="input-email-address" class="form-control" formControlName="email" />\n        </div>\n        <div class="form-group">\n          <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\n          ><span> * </span><input type="password" id="input-password" class="form-control" formControlName="password" />\n        </div>\n        <abp-button [loading]="inProgress" type="submit">\n          {{ \'AbpAccount::Register\' | abpLocalization }}\n        </abp-button>\n      </form>\n      <div style="padding-top: 20px">\n        <a routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:w},{type:l.OAuthService},{type:p.Store},{type:r.ToasterService}]},e}();var C=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:n.DynamicLayoutComponent,children:[{path:"login",component:A},{path:"register",component:N}]}],L=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[s.RouterModule.forChild(C)],exports:[s.RouterModule]}]}],e}(),O=function(){function e(e,t,n){this.store=e,this.toasterService=t,this.accountService=n,this.tenant={}}return e.prototype.ngOnInit=function(){this.tenant=this.store.selectSnapshot(n.SessionState.getTenant)||{},this.tenantName=this.tenant.name||""},e.prototype.onSwitch=function(){this.isModalVisible=!0},e.prototype.save=function(){var e=this;this.tenant.name?this.accountService.findTenant(this.tenant.name).pipe(m.take(1),m.catchError(function(t){return e.toasterService.error(b(function(){return t.error.error_description},"AbpUi::DefaultErrorMessage"),"AbpUi::Error"),d.throwError(t)})).subscribe(function(t){var r=t.success,o=t.tenantId;r?(e.tenant={id:o,name:e.tenant.name},e.tenantName=e.tenant.name,e.isModalVisible=!1):(e.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[e.tenant.name]}),e.tenant={}),e.store.dispatch(new n.SetTenant(r?e.tenant:null))}):(this.store.dispatch(new n.SetTenant(null)),this.tenantName=null,this.isModalVisible=!1)},e.decorators=[{type:t.Component,args:[{selector:"abp-tenant-box",template:'<div\n  class="tenant-switch-box"\n  style="background-color: #eee; margin-bottom: 20px; color: #000; padding: 10px; text-align: center;"\n>\n  <span style="color: #666;">{{ \'AbpUiMultiTenancy::Tenant\' | abpLocalization }}: </span>\n  <strong>\n    <i>{{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}</i>\n  </strong>\n  (<a id="abp-tenant-switch-link" style="color: #333; cursor: pointer" (click)="onSwitch()">{{\n    \'AbpUiMultiTenancy::Switch\' | abpLocalization\n  }}</a\n  >)\n</div>\n\n<abp-modal [(visible)]="isModalVisible" size="md">\n  <ng-template #abpHeader>\n    <h5>Switch Tenant</h5>\n  </ng-template>\n  <ng-template #abpBody>\n    <form (ngSubmit)="save()">\n      <div class="mt-2">\n        <div class="form-group">\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\n        </div>\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\n      </div>\n    </form>\n  </ng-template>\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary">\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n    </button>\n    <button type="button" class="btn btn-primary" (click)="save()">\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\n    </button>\n  </ng-template>\n</abp-modal>\n'}]}],e.ctorParameters=function(){return[{type:p.Store},{type:r.ToasterService},{type:w}]},e}();var P=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[A,N,O],imports:[n.CoreModule,L,r.ThemeSharedModule,i.TableModule,o.NgbDropdownModule,a.NgxValidateCoreModule],exports:[]}]}],e}();e.ACCOUNT_OPTIONS=h,e.ACCOUNT_ROUTES={routes:[{name:"Account",path:"account",invisible:!0,layout:"application",children:[{path:"login",name:"Login",order:1},{path:"register",name:"Register",order:2}]}],settings:[]},e.AccountModule=P,e.LoginComponent=A,e.RegisterComponent=N,e.RootAccountModule=v,e.optionsFactory=g,e.ɵa=g,e.ɵb=h,e.ɵc=A,e.ɵe=N,e.ɵf=w,e.ɵg=O,e.ɵh=L,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.account.umd.min.js.map